 Resolving package versions...
 Installed URIParser ─────────── v0.4.0
 Installed Requires ──────────── v0.5.2
 Installed Reexport ──────────── v0.2.0
 Installed Conda ─────────────── v1.3.0
 Installed AbstractFFTs ──────── v0.5.0
 Installed Polynomials ───────── v0.6.0
 Installed BinaryProvider ────── v0.5.8
 Installed AbstractOperators ─── v0.2.2
 Installed Compat ────────────── v2.2.0
 Installed JSON ──────────────── v0.21.0
 Installed RecipesBase ───────── v0.7.0
 Installed Parsers ───────────── v0.3.10
 Installed ArrayInterface ────── v2.0.0
 Installed RecursiveArrayTools ─ v1.2.0
 Installed StaticArrays ──────── v0.12.1
 Installed DSP ───────────────── v0.6.2
 Installed FFTW ──────────────── v1.1.0
 Installed VersionParsing ────── v1.1.3
 Installed SpecialFunctions ──── v0.8.0
 Installed BinDeps ───────────── v0.8.10
  Updating `~/.julia/environments/v1.2/Project.toml`
  [d9c5613a] + AbstractOperators v0.2.2
  Updating `~/.julia/environments/v1.2/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [d9c5613a] + AbstractOperators v0.2.2
  [4fba245c] + ArrayInterface v2.0.0
  [9e28174c] + BinDeps v0.8.10
  [b99e7846] + BinaryProvider v0.5.8
  [34da2185] + Compat v2.2.0
  [8f4d0f93] + Conda v1.3.0
  [717857b8] + DSP v0.6.2
  [7a1cc6ca] + FFTW v1.1.0
  [682c06a0] + JSON v0.21.0
  [69de0a69] + Parsers v0.3.10
  [f27b6e38] + Polynomials v0.6.0
  [3cdcf5f2] + RecipesBase v0.7.0
  [731186ca] + RecursiveArrayTools v1.2.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v0.5.2
  [276daf66] + SpecialFunctions v0.8.0
  [90137ffa] + StaticArrays v0.12.1
  [30578b45] + URIParser v0.4.0
  [81def892] + VersionParsing v1.1.3
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Conda ───────────→ `~/.julia/packages/Conda/kLXeC/deps/build.log`
  Building FFTW ────────────→ `~/.julia/packages/FFTW/loJ3F/deps/build.log`
  Building SpecialFunctions → `~/.julia/packages/SpecialFunctions/ne2iw/deps/build.log`
   Testing AbstractOperators
 Resolving package versions...
    Status `/tmp/jl_8d1Uyi/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [d9c5613a] AbstractOperators v0.2.2
  [4fba245c] ArrayInterface v2.0.0
  [9e28174c] BinDeps v0.8.10
  [b99e7846] BinaryProvider v0.5.8
  [34da2185] Compat v2.2.0
  [8f4d0f93] Conda v1.3.0
  [717857b8] DSP v0.6.2
  [7a1cc6ca] FFTW v1.1.0
  [682c06a0] JSON v0.21.0
  [69de0a69] Parsers v0.3.10
  [f27b6e38] Polynomials v0.6.0
  [3cdcf5f2] RecipesBase v0.7.0
  [731186ca] RecursiveArrayTools v1.2.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v0.5.2
  [276daf66] SpecialFunctions v0.8.0
  [90137ffa] StaticArrays v0.12.1
  [30578b45] URIParser v0.4.0
  [81def892] VersionParsing v1.1.3
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]

Testing linear operators

★  ℝ^5 -> ℝ^10 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

ℱc  ℝ^4 -> ℝ^4 
forward preallocated
  0.000004 seconds (8 allocations: 352 bytes)
adjoint preallocated
  0.000006 seconds (13 allocations: 624 bytes)

ℱc⁻¹  ℝ^4 -> ℝ^4 
forward preallocated
  0.000005 seconds (13 allocations: 624 bytes)
adjoint preallocated
  0.000003 seconds (8 allocations: 352 bytes)

ℱ  ℝ^4 -> ℂ^4 
forward preallocated
  0.000000 seconds (1 allocation: 144 bytes)
adjoint preallocated
  0.000000 seconds (1 allocation: 144 bytes)

ℱ  ℂ^4 -> ℂ^4 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

ℱ  ℝ^4 -> ℂ^4 
forward preallocated
  0.000000 seconds (1 allocation: 144 bytes)
adjoint preallocated
  0.000001 seconds (1 allocation: 144 bytes)

ℱ  ℂ^4 -> ℂ^4 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

ℱ  ℝ^4 -> ℂ^4 
forward preallocated
  0.000000 seconds (1 allocation: 144 bytes)
adjoint preallocated
  0.000001 seconds (1 allocation: 144 bytes)

ℱ  ℂ^4 -> ℂ^4 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

ℱ  ℝ^(4, 7) -> ℂ^(4, 7) 
forward preallocated
  0.000001 seconds (1 allocation: 544 bytes)
adjoint preallocated
  0.000001 seconds (4 allocations: 640 bytes)

ℱ  ℂ^(4, 7) -> ℂ^(4, 7) 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

ℱ  ℝ^(7, 4) -> ℂ^(7, 4) 
forward preallocated
  0.000000 seconds (1 allocation: 544 bytes)
adjoint preallocated
  0.000001 seconds (4 allocations: 640 bytes)

ℱ  ℂ^(4, 7) -> ℂ^(4, 7) 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

ℱ⁻¹  ℝ^5 -> ℂ^5 
forward preallocated
  0.000000 seconds (1 allocation: 160 bytes)
adjoint preallocated
  0.000000 seconds (1 allocation: 160 bytes)

ℱ⁻¹  ℂ^5 -> ℂ^5 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

ℱ⁻¹  ℝ^5 -> ℂ^5 
forward preallocated
  0.000000 seconds (1 allocation: 160 bytes)
adjoint preallocated
  0.000000 seconds (1 allocation: 160 bytes)

ℱ⁻¹  ℂ^5 -> ℂ^5 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

ℱ⁻¹  ℝ^(5, 6) -> ℂ^(5, 6) 
forward preallocated
  0.000001 seconds (1 allocation: 576 bytes)
adjoint preallocated
  0.000001 seconds (6 allocations: 720 bytes)

ℱ⁻¹  ℂ^(5, 6) -> ℂ^(5, 6) 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds (3 allocations: 112 bytes)

ℱ⁻¹  ℝ^(6, 5) -> ℂ^(6, 5) 
forward preallocated
  0.000001 seconds (1 allocation: 576 bytes)
adjoint preallocated
  0.000001 seconds (6 allocations: 720 bytes)

ℱ⁻¹  ℂ^(6, 5) -> ℂ^(6, 5) 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds (3 allocations: 112 bytes)

ℱ⁻¹  ℂ^(4, 19, 5) -> ℂ^(4, 19, 5) 
forward preallocated
  0.000009 seconds
adjoint preallocated
  0.000012 seconds (3 allocations: 128 bytes)

ℱ⁻¹  ℂ^(4, 18, 5) -> ℂ^(4, 18, 5) 
forward preallocated
  0.000010 seconds
adjoint preallocated
  0.000008 seconds (3 allocations: 128 bytes)

ℱ⁻¹  ℂ^(4, 18, 5) -> ℂ^(4, 18, 5) 
forward preallocated
  0.000005 seconds
adjoint preallocated
  0.000008 seconds (3 allocations: 128 bytes)

ℱ  ℝ^4 -> ℂ^3 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

ℱ  ℝ^(4, 8, 5) -> ℂ^(4, 5, 5) 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000003 seconds (3 allocations: 112 bytes)

ℱ⁻¹  ℂ^7 -> ℝ^12 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds (2 allocations: 96 bytes)

ℱ⁻¹  ℂ^6 -> ℝ^11 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds (2 allocations: 96 bytes)

ℱ⁻¹  ℂ^(4, 10, 5) -> ℝ^(4, 19, 5) 
forward preallocated
  0.000012 seconds
adjoint preallocated
  0.000016 seconds (8 allocations: 384 bytes)

ℱ⁻¹  ℂ^(4, 10, 5) -> ℝ^(4, 18, 5) 
forward preallocated
  0.000009 seconds
adjoint preallocated
  0.000030 seconds (8 allocations: 384 bytes)

ℱ⁻¹  ℂ^(3, 18, 5) -> ℝ^(5, 18, 5) 
forward preallocated
  0.000002 seconds
adjoint preallocated
  0.000010 seconds (8 allocations: 384 bytes)

╲  ℝ^4 -> ℝ^4 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

╲  ℝ^4 -> ℂ^4 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

╲  ℝ^4 -> ℝ^4 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

╲  ℝ^4 -> ℂ^4 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

I  ℝ^4 -> ℝ^4 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000001 seconds

IIR  ℝ^15 -> ℝ^15 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

FIR  ℝ^(15, 2) -> ℝ^(15, 2) 
forward preallocated
  0.000002 seconds
adjoint preallocated
  0.000002 seconds

δx  ℝ^10 -> ℝ^9 
forward preallocated
  0.000001 seconds (1 allocation: 32 bytes)
adjoint preallocated
  0.000000 seconds

δx  ℝ^(10, 5) -> ℝ^(9, 5) 
forward preallocated
  0.000001 seconds (1 allocation: 64 bytes)
adjoint preallocated
  0.000000 seconds

δy  ℝ^(10, 5) -> ℝ^(10, 4) 
forward preallocated
  0.000000 seconds (1 allocation: 64 bytes)
adjoint preallocated
  0.000001 seconds

δx  ℝ^(10, 5, 7) -> ℝ^(9, 5, 7) 
forward preallocated
  0.000003 seconds (1 allocation: 80 bytes)
adjoint preallocated
  0.000003 seconds

δy  ℝ^(10, 5, 7) -> ℝ^(10, 4, 7) 
forward preallocated
  0.000099 seconds (1 allocation: 80 bytes)
adjoint preallocated
  0.000005 seconds

δz  ℝ^(10, 5, 7) -> ℝ^(10, 5, 6) 
forward preallocated
  0.000004 seconds (1 allocation: 80 bytes)
adjoint preallocated
  0.000005 seconds

δx  ℝ^(5, 6, 2, 3) -> ℝ^(4, 6, 2, 3) 
forward preallocated
  0.000003 seconds (1 allocation: 112 bytes)
adjoint preallocated
  0.000002 seconds

δx4  ℝ^(5, 6, 2, 3) -> ℝ^(5, 6, 2, 2) 
forward preallocated
  0.000002 seconds (1 allocation: 112 bytes)
adjoint preallocated
  0.000003 seconds

↓  ℝ^5 -> ℝ^3 
forward preallocated
  0.000000 seconds (1 allocation: 48 bytes)
adjoint preallocated
  0.000000 seconds

↓  ℝ^(5, 4) -> ℝ^(3, 4) 
forward preallocated
  0.000000 seconds (1 allocation: 64 bytes)
adjoint preallocated
  0.000000 seconds

↓  ℝ^(5, 4) -> ℝ^5 
forward preallocated
  0.000000 seconds (1 allocation: 48 bytes)
adjoint preallocated
  0.000000 seconds

↓  ℝ^(5, 4, 3) -> ℝ^(3, 3) 
forward preallocated
  0.000000 seconds (1 allocation: 64 bytes)
adjoint preallocated
  0.000000 seconds

▒  ℝ^4 -> ℝ^5 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

▒  ℂ^4 -> ℂ^5 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

▒  ℂ^4 -> ℂ^5 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

▒  ℝ^4 -> ℂ^5 
forward preallocated
  0.000001 seconds (2 allocations: 64 bytes)
adjoint preallocated
  0.000001 seconds (1 allocation: 144 bytes)

▒  ℝ^(4, 3) -> ℂ^(5, 3) 
forward preallocated
  0.000001 seconds (2 allocations: 64 bytes)
adjoint preallocated
  0.000001 seconds (4 allocations: 368 bytes)

(⋅)b  ℝ^(5, 6) -> ℝ^5 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000001 seconds (5 allocations: 160 bytes)

(⋅)b  ℂ^(5, 6) -> ℂ^5 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds (5 allocations: 160 bytes)

(⋅)b  ℝ^(5, 6) -> ℝ^(5, 7) 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

(⋅)b  ℂ^(5, 6) -> ℂ^(5, 7) 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

A  ℝ^4 -> ℝ^5 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000001 seconds (1 allocation: 16 bytes)

※  ℝ^(10, 2) -> ℝ^(10, 1) 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

※  ℝ^(10, 3) -> ℝ^(10, 2) 
forward preallocated
  0.000002 seconds
adjoint preallocated
  0.000002 seconds

※  ℝ^(10, 3) -> ℝ^(10, 2) 
forward preallocated
  0.000002 seconds
adjoint preallocated
  0.000002 seconds

Ʋ  ℝ^(10, 5) -> ℝ^(50, 2) 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

Ʋ  ℝ^(10, 5, 3) -> ℝ^(150, 3) 
forward preallocated
  0.000003 seconds
adjoint preallocated
  0.000003 seconds

◎  ℝ^5 -> ℝ^11 
┌ Warning: The default value of `padmode` will be changing from `:longest` to
│ `:none` in a future release of DSP. In preparation for this change,
│ leaving `padmode` unspecified is currently deprecated. To keep
│ current behavior specify `padmode=:longest`. To avoid this warning,
│ specify padmode = :none or padmode = :longest where appropriate.
│   caller = mul!(::Array{Float64,1}, ::Xcorr{Float64,Array{Float64,1}}, ::Array{Float64,1}) at Xcorr.jl:28
└ @ AbstractOperators ~/.julia/packages/AbstractOperators/xTEMf/src/linearoperators/Xcorr.jl:28
forward preallocated
  0.000379 seconds (259 allocations: 21.141 KiB)
adjoint preallocated
  0.000038 seconds (134 allocations: 8.547 KiB)
┌ Warning: The default value of `padmode` will be changing from `:longest` to
│ `:none` in a future release of DSP. In preparation for this change,
│ leaving `padmode` unspecified is currently deprecated. To keep
│ current behavior specify `padmode=:longest`. To avoid this warning,
│ specify padmode = :none or padmode = :longest where appropriate.
│   caller = top-level scope at test_linear_operators.jl:932
└ @ Core ~/.julia/packages/AbstractOperators/xTEMf/test/test_linear_operators.jl:932

[I;0]  ℝ^3 -> ℝ^8 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

[I;0]  ℝ^(3, 2) -> ℝ^(8, 5) 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

[I;0]  ℝ^(3, 2, 2) -> ℝ^(8, 5, 3) 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000000 seconds

0  ℝ^(3, 4) -> ℂ^(5, 2) 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

Testing non linear operators

σ  ℝ^4 -> ℝ^4 
forward preallocated
  0.000000 seconds
J(σ)  ℝ^4 -> ℝ^4 
adjoint jacobian mul! preallocated
  0.000000 seconds (1 allocation: 16 bytes)

σ  ℝ^(4, 5) -> ℝ^(4, 5) 
forward preallocated
  0.000001 seconds (11 allocations: 256 bytes)
J(σ)  ℝ^(4, 5) -> ℝ^(4, 5) 
adjoint jacobian mul! preallocated
  0.000002 seconds (25 allocations: 736 bytes)

σ  ℝ^10 -> ℝ^10 
forward preallocated
  0.000001 seconds
J(σ)  ℝ^10 -> ℝ^10 
adjoint jacobian mul! preallocated
  0.000001 seconds (1 allocation: 16 bytes)

σ  ℝ^(4, 5, 6) -> ℝ^(4, 5, 6) 
forward preallocated
  0.000006 seconds (8 allocations: 288 bytes)
J(σ)  ℝ^(4, 5, 6) -> ℝ^(4, 5, 6) 
adjoint jacobian mul! preallocated
  0.000015 seconds (9 allocations: 304 bytes)

σ  ℝ^(4, 5, 6) -> ℝ^(4, 5, 6) 
forward preallocated
  0.000008 seconds (7 allocations: 192 bytes)
J(σ)  ℝ^(4, 5, 6) -> ℝ^(4, 5, 6) 
adjoint jacobian mul! preallocated
  0.000008 seconds (15 allocations: 1.484 KiB)

e  ℝ^(4, 5, 6) -> ℝ^(4, 5, 6) 
forward preallocated
  0.000003 seconds (3 allocations: 112 bytes)
J(e)  ℝ^(4, 5, 6) -> ℝ^(4, 5, 6) 
adjoint jacobian mul! preallocated
  0.000004 seconds (9 allocations: 256 bytes)

sin  ℝ^(4, 5, 6) -> ℝ^(4, 5, 6) 
forward preallocated
  0.000005 seconds (3 allocations: 112 bytes)
J(sin)  ℝ^(4, 5, 6) -> ℝ^(4, 5, 6) 
adjoint jacobian mul! preallocated
  0.000005 seconds (9 allocations: 256 bytes)

cos  ℝ^(4, 5, 6) -> ℝ^(4, 5, 6) 
forward preallocated
  0.000003 seconds (3 allocations: 112 bytes)
J(cos)  ℝ^(4, 5, 6) -> ℝ^(4, 5, 6) 
adjoint jacobian mul! preallocated
  0.000007 seconds (15 allocations: 2.563 KiB)

atan  ℝ^10 -> ℝ^10 
forward preallocated
  0.000000 seconds
J(atan)  ℝ^10 -> ℝ^10 
adjoint jacobian mul! preallocated
  0.000001 seconds (1 allocation: 16 bytes)

tanh  ℝ^10 -> ℝ^10 
forward preallocated
  0.000001 seconds
J(tanh)  ℝ^10 -> ℝ^10 
adjoint jacobian mul! preallocated
  0.000001 seconds (1 allocation: 16 bytes)

『  ℝ^10 -> ℝ^10 
forward preallocated
  0.000000 seconds
J(『)  ℝ^10 -> ℝ^10 
adjoint jacobian mul! preallocated
  0.000000 seconds (1 allocation: 16 bytes)

『  ℝ^10 -> ℝ^10 
forward preallocated
  0.000001 seconds
J(『)  ℝ^10 -> ℝ^10 
adjoint jacobian mul! preallocated
  0.000001 seconds (1 allocation: 16 bytes)

Testing linear operators calculus rules

▒*▒  ℝ^4 -> ℝ^3 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000002 seconds

Π  ℝ^4 -> ℝ^2 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

Π  ℝ^4 -> ℝ^2 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

[▒,0;0,▒]  ℝ^7  ℝ^2 -> ℝ^4  ℝ^5 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

DCAT  ℝ^7  ℝ^2  ℝ^5 -> ℝ^4  ℝ^5  ℝ^5 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

[I,0;0,I]  ℝ^4  ℝ^7 -> ℝ^4  ℝ^7 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000000 seconds

[▒,▒]  ℝ^7  ℝ^5 -> ℝ^4 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000002 seconds

[▒,▒]  ℝ^5  ℝ^7 -> ℝ^4 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

HCAT  ℝ^7  ℝ^5  ℝ^6 -> ℝ^4 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

HCAT  ℝ^7 ... ℝ^6 -> ℝ^4 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000002 seconds

HCAT  ℝ^7 ... ℝ^6 -> ℝ^4 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000002 seconds

HCAT  ℝ^7 ... ℝ^6 -> ℝ^4 
forward preallocated
  0.000002 seconds
adjoint preallocated
  0.000002 seconds

HCAT  ℝ^5 ... ℝ^6 -> ℝ^4 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000002 seconds

¶▒  ℝ^4 -> ℝ^(2, 2, 2) 
forward preallocated
  0.000001 seconds (4 allocations: 128 bytes)
adjoint preallocated
  0.000001 seconds (5 allocations: 144 bytes)

α▒  ℝ^4 -> ℝ^8 
forward preallocated
  0.000002 seconds
adjoint preallocated
  0.000001 seconds

α▒  ℝ^4 -> ℝ^8 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

αℱ  ℝ^(8, 4) -> ℂ^(8, 4) 
forward preallocated
  0.000001 seconds (4 allocations: 720 bytes)
adjoint preallocated
  0.000001 seconds (8 allocations: 832 bytes)

▒+▒  ℝ^7 -> ℝ^5 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

Σ  ℝ^7 -> ℝ^5 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

▒ᵃ  ℝ^5 -> ℝ^7 
forward preallocated
  0.000000 seconds
adjoint preallocated
  0.000000 seconds

[▒;▒]  ℝ^5 -> ℝ^4  ℝ^7 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

[▒;ℱᵃ]  ℂ^5 -> ℂ^4  ℝ^5 
forward preallocated
  0.000002 seconds (1 allocation: 160 bytes)
adjoint preallocated
  0.000001 seconds (1 allocation: 160 bytes)

VCAT  ℝ^5 -> ℝ^4  ℝ^7  ℝ^3 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

VCAT  ℝ^5 -> ℝ^4 ... ℝ^3 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

VCAT  ℝ^5 -> ℝ^4 ... ℝ^3 
forward preallocated
  0.000002 seconds
adjoint preallocated
  0.000001 seconds

.▒  ℝ^4 -> ℝ^(8, 10) 
forward preallocated
  0.000001 seconds (3 allocations: 80 bytes)
adjoint preallocated
  0.000003 seconds (10 allocations: 480 bytes)

.I  ℝ^(8, 4) -> ℝ^(8, 4, 5, 7) 
forward preallocated
  0.000005 seconds (3 allocations: 112 bytes)
adjoint preallocated
  0.000024 seconds (175 allocations: 7.656 KiB)

.I  ℝ^1 -> ℝ^(1, 5) 
forward preallocated
  0.000000 seconds (3 allocations: 80 bytes)
adjoint preallocated
  0.000000 seconds

.I  ℝ^(1, 5) -> ℝ^(4, 5) 
forward preallocated
  0.000000 seconds (3 allocations: 96 bytes)
adjoint preallocated
  0.000001 seconds (24 allocations: 896 bytes)

[I,.I]  ℝ^(4, 5)  ℝ^(1, 5) -> ℝ^(4, 5) 
forward preallocated
  0.000001 seconds (7 allocations: 256 bytes)
adjoint preallocated
  0.000002 seconds (25 allocations: 912 bytes)

.I  ℝ^2 -> ℝ^(2, 5, 8) 
forward preallocated
  0.000001 seconds (3 allocations: 96 bytes)
adjoint preallocated
  0.000004 seconds (40 allocations: 2.500 KiB)

.I  ℝ^1 -> ℝ^(1, 5, 8) 
forward preallocated
  0.000001 seconds (3 allocations: 96 bytes)
adjoint preallocated
  0.000000 seconds

.αI  ℝ^1 -> ℝ^(1, 5, 8) 
forward preallocated
  0.000001 seconds (3 allocations: 96 bytes)
adjoint preallocated
  0.000002 seconds (41 allocations: 736 bytes)
▒+d  ℝ^6 -> ℝ^5 
▒-d  ℝ^6 -> ℝ^5 
▒+d  ℝ^6 -> ℝ^5 
▒+d-d  ℝ^6 -> ℝ^5 

▒*[▒,▒]  ℝ^4  ℝ^7 -> ℝ^2 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

▒*[▒,▒]  ℝ^7  ℝ^4 -> ℝ^2 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds

[▒*[▒,▒],▒]  ℝ^4  ℝ^7  ℝ^10 -> ℝ^2 
forward preallocated
  0.000001 seconds (2 allocations: 48 bytes)
adjoint preallocated
  0.000001 seconds (1 allocation: 32 bytes)

[▒*[▒,▒],▒]  ℝ^10  ℝ^7  ℝ^4 -> ℝ^2 
forward preallocated
  0.000001 seconds (2 allocations: 48 bytes)
adjoint preallocated
  0.000001 seconds (1 allocation: 32 bytes)

[▒*[▒,▒],▒]  ℝ^4  ℝ^10  ℝ^7 -> ℝ^2 
forward preallocated
  0.000001 seconds (2 allocations: 48 bytes)
adjoint preallocated
  0.000001 seconds (1 allocation: 32 bytes)

[[▒,▒];[▒,▒]]  ℝ^4  ℝ^7 -> ℝ^3  ℝ^5 
forward preallocated
  0.000002 seconds
adjoint preallocated
  0.000002 seconds (11 allocations: 272 bytes)

[[▒,ℱ];[▒,ℱ]]  ℂ^4  ℝ^5 -> ℂ^5  ℂ^5 
forward preallocated
  0.000002 seconds (2 allocations: 320 bytes)
adjoint preallocated
  0.000005 seconds (21 allocations: 752 bytes)

[[▒;▒],[▒;▒]]  ℝ^3  ℝ^5 -> ℝ^4  ℝ^7 
forward preallocated
  0.000001 seconds (11 allocations: 272 bytes)
adjoint preallocated
  0.000001 seconds (2 allocations: 32 bytes)

HCAT+HCAT  ℝ^7  ℝ^5  ℝ^3 -> ℝ^4 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000002 seconds (15 allocations: 384 bytes)

HCAT+HCAT  ℝ^3  ℝ^5  ℝ^7 -> ℝ^4 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000002 seconds (15 allocations: 384 bytes)

Σ  ℝ^5 -> ℝ^4  ℝ^7 
forward preallocated
  0.000002 seconds (22 allocations: 544 bytes)
adjoint preallocated
  0.000001 seconds (3 allocations: 48 bytes)

α[▒,0;0,▒]  ℝ^7  ℝ^5 -> ℝ^4  ℝ^3 
forward preallocated
  0.000001 seconds (8 allocations: 192 bytes)
adjoint preallocated
  0.000001 seconds (8 allocations: 192 bytes)

α[▒;▒]  ℝ^7 -> ℝ^4  ℝ^3 
forward preallocated
  0.000002 seconds (8 allocations: 192 bytes)
adjoint preallocated
  0.000001 seconds (1 allocation: 16 bytes)

α[▒,▒]  ℝ^3  ℝ^7 -> ℝ^4 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds (8 allocations: 192 bytes)

[▒,0;0,HCAT]  ℝ^4 ... ℝ^5 -> ℝ^2  ℝ^3 
forward preallocated
  0.000002 seconds (2 allocations: 48 bytes)
adjoint preallocated
  0.000001 seconds (1 allocation: 32 bytes)

[[▒,▒],0;0,HCAT]  ℝ^4 ... ℝ^5 -> ℝ^2  ℝ^3 
forward preallocated
  0.000001 seconds (4 allocations: 96 bytes)
adjoint preallocated
  0.000001 seconds (2 allocations: 64 bytes)

α▒+▒  ℝ^7 -> ℝ^5 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000002 seconds (1 allocation: 16 bytes)

α▒*▒  ℝ^4 -> ℝ^3 
forward preallocated
  0.000001 seconds
adjoint preallocated
  0.000001 seconds (1 allocation: 16 bytes)

Testing  calculus non linear operators

ασ  ℝ^3 -> ℝ^3 
forward preallocated
  0.000000 seconds
αJ(σ)  ℝ^3 -> ℝ^3 
adjoint jacobian mul! preallocated
  0.000016 seconds (2 allocations: 32 bytes)

α『  ℝ^3 -> ℝ^3 
forward preallocated
  0.000000 seconds
αJ(『)  ℝ^3 -> ℝ^3 
adjoint jacobian mul! preallocated
  0.000000 seconds (2 allocations: 32 bytes)
Internal error: encountered unexpected error in runtime:
MethodError(f=typeof(Base.string)(), args=(Expr(:<:, :t, :r),), world=0x0000000000000eec)
rec_backtrace at /buildworker/worker/package_linux64/build/src/stackwalk.c:94
record_backtrace at /buildworker/worker/package_linux64/build/src/task.c:219 [inlined]
jl_throw at /buildworker/worker/package_linux64/build/src/task.c:429
jl_method_error_bare at /buildworker/worker/package_linux64/build/src/gf.c:1606
jl_method_error at /buildworker/worker/package_linux64/build/src/gf.c:1624
jl_lookup_generic_ at /buildworker/worker/package_linux64/build/src/gf.c:2161 [inlined]
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2182
limit_type_size at ./compiler/typelimits.jl:23
jfptr_limit_type_size_4348.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2191
abstract_call_method at ./compiler/abstractinterpretation.jl:331
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:818
abstract_call at ./compiler/abstractinterpretation.jl:608
abstract_eval_call at ./compiler/abstractinterpretation.jl:847
abstract_eval at ./compiler/abstractinterpretation.jl:917
typeinf_local at ./compiler/abstractinterpretation.jl:1174
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1230
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:482
abstract_call_method at ./compiler/abstractinterpretation.jl:376
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:818
abstract_call at ./compiler/abstractinterpretation.jl:608
abstract_eval_call at ./compiler/abstractinterpretation.jl:847
abstract_eval at ./compiler/abstractinterpretation.jl:917
typeinf_local at ./compiler/abstractinterpretation.jl:1174
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1230
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:482
abstract_call_method at ./compiler/abstractinterpretation.jl:376
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:818
abstract_call at ./compiler/abstractinterpretation.jl:608
abstract_eval_call at ./compiler/abstractinterpretation.jl:847
abstract_eval at ./compiler/abstractinterpretation.jl:917
typeinf_local at ./compiler/abstractinterpretation.jl:1160
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1230
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:482
abstract_call_method at ./compiler/abstractinterpretation.jl:376
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:818
abstract_call at ./compiler/abstractinterpretation.jl:608
abstract_eval_call at ./compiler/abstractinterpretation.jl:847
abstract_eval at ./compiler/abstractinterpretation.jl:917
typeinf_local at ./compiler/abstractinterpretation.jl:1160
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1230
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:482
abstract_call_method at ./compiler/abstractinterpretation.jl:376
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:818
abstract_call at ./compiler/abstractinterpretation.jl:608
abstract_eval_call at ./compiler/abstractinterpretation.jl:847
abstract_eval at ./compiler/abstractinterpretation.jl:917
typeinf_local at ./compiler/abstractinterpretation.jl:1174
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1230
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:482
abstract_call_method at ./compiler/abstractinterpretation.jl:376
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:818
abstract_call at ./compiler/abstractinterpretation.jl:608
abstract_eval_call at ./compiler/abstractinterpretation.jl:847
abstract_eval at ./compiler/abstractinterpretation.jl:917
typeinf_local at ./compiler/abstractinterpretation.jl:1174
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1230
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:482
abstract_call_method at ./compiler/abstractinterpretation.jl:376
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:818
abstract_call at ./compiler/abstractinterpretation.jl:608
abstract_eval_call at ./compiler/abstractinterpretation.jl:847
abstract_eval at ./compiler/abstractinterpretation.jl:917
typeinf_local at ./compiler/abstractinterpretation.jl:1174
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1230
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:482
abstract_call_method at ./compiler/abstractinterpretation.jl:376
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:818
jfptr_abstract_call_591.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2191
abstract_apply at ./compiler/abstractinterpretation.jl:561
abstract_call at ./compiler/abstractinterpretation.jl:609
abstract_call at ./compiler/abstractinterpretation.jl:608
abstract_eval_call at ./compiler/abstractinterpretation.jl:847
abstract_eval at ./compiler/abstractinterpretation.jl:917
typeinf_local at ./compiler/abstractinterpretation.jl:1174
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1230
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:482
abstract_call_method at ./compiler/abstractinterpretation.jl:376
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:818
jfptr_abstract_call_591.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2191
abstract_apply at ./compiler/abstractinterpretation.jl:561
abstract_call at ./compiler/abstractinterpretation.jl:609
abstract_call at ./compiler/abstractinterpretation.jl:608
abstract_eval_call at ./compiler/abstractinterpretation.jl:847
abstract_eval at ./compiler/abstractinterpretation.jl:917
typeinf_local at ./compiler/abstractinterpretation.jl:1174
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1230
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:482
abstract_call_method at ./compiler/abstractinterpretation.jl:376
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:93
abstract_call at ./compiler/abstractinterpretation.jl:818
abstract_call at ./compiler/abstractinterpretation.jl:608
abstract_eval_call at ./compiler/abstractinterpretation.jl:847
abstract_eval at ./compiler/abstractinterpretation.jl:917
typeinf_local at ./compiler/abstractinterpretation.jl:1174
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1230
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:568
typeinf_ext at ./compiler/typeinfer.jl:599
jfptr_typeinf_ext_1.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2191
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1614 [inlined]
jl_type_infer at /buildworker/worker/package_linux64/build/src/gf.c:207
jl_compile_method_internal at /buildworker/worker/package_linux64/build/src/gf.c:1773
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2196
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:323
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:411
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:362 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:772
jl_interpret_toplevel_thunk_callback at /buildworker/worker/package_linux64/build/src/interpreter.c:884
Interpreter frame (ip: 0)
Core.CodeInfo(code=Array{Any, (9,)}[
  Expr(:call, :test_NLop, :op, :x, :r, :verb),
  Expr(:call, Base.indexed_iterate, SSAValue(1), 1),
  Expr(:call, Core.getfield, SSAValue(2), 1),
  :y = SSAValue(3),
  Core.SlotNumber(id=1) = Expr(:call, Core.getfield, SSAValue(2), 2),
  Expr(:call, Base.indexed_iterate, SSAValue(1), 2, Core.SlotNumber(id=1)),
  Expr(:call, Core.getfield, SSAValue(6), 1),
  :grad = SSAValue(7),
  Expr(:return, nothing)], codelocs=Array{Int32, (9,)}[1, 1, 1, 1, 1, 1, 1, 1, 1], ssavaluetypes=9, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/test_nonlinear_operators_calculus.jl"), line=33, inlined_at=0)], slotnames=Array{Symbol, (1,)}[Symbol("#s76")], slotflags=Array{UInt8, (1,)}[0x18], slottypes=nothing, rettype=Any, parent=nothing, min_world=1, max_world=-1, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:893
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:815
jl_parse_eval_all at /buildworker/worker/package_linux64/build/src/ast.c:873
jl_load at /buildworker/worker/package_linux64/build/src/toplevel.c:879
include at ./boot.jl:328 [inlined]
include_relative at ./loading.jl:1094
include at ./Base.jl:31
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2191
include at ./client.jl:431
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2191
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:323
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:411
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:362 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:772
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:699
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:699
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:699
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:699
jl_interpret_toplevel_thunk_callback at /buildworker/worker/package_linux64/build/src/interpreter.c:884
Interpreter frame (ip: 292)
Core.CodeInfo(code=Array{Any, (481,)}[
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(1), 0),
  Expr(:gotoifnot, SSAValue(2), 6),
  Core.SlotNumber(id=20) = Test.DefaultTestSet,
  goto 8,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=20) = Expr(:call, Test.typeof, SSAValue(6)),
  Core.SlotNumber(id=20),
  Expr(:call, Test._check_testset, SSAValue(8), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(10), 0),
  Expr(:gotoifnot, SSAValue(11), 15),
  Core.SlotNumber(id=21) = Test.DefaultTestSet,
  goto 17,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=21) = Expr(:call, Test.typeof, SSAValue(15)),
  Core.SlotNumber(id=21),
  SSAValue(17),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(20)),
  Expr(:call, Base.merge, SSAValue(19), SSAValue(21)),
  Expr(:call, Base.isempty, SSAValue(22)),
  Expr(:gotoifnot, SSAValue(23), 27),
  Core.SlotNumber(id=22) = Expr(:call, SSAValue(18), "AbstractOperators"),
  goto 29,
  Expr(:call, Core.kwfunc, SSAValue(18)),
  Core.SlotNumber(id=22) = Expr(:call, SSAValue(27), SSAValue(22), SSAValue(18), "AbstractOperators"),
  Symbol("#35#ts") = Core.SlotNumber(id=22),
  Expr(:gotoifnot, false, 32),
  goto 30,
  Expr(:call, Test.push_testset, Symbol("#35#ts")),
  Expr(:call, Test.copy, Test.GLOBAL_RNG),
  Symbol("#36#oldrng") = SSAValue(33),
  Expr(:enter, 473),
  Core.SlotNumber(id=23) = -1,
  Expr(:enter, 457),
  <newvar #<1>>,
  <newvar #<2>>,
  <newvar #<3>>,
  <newvar #<4>>,
  <newvar #<5>>,
  <newvar #<6>>,
  <newvar #<7>>,
  <newvar #<8>>,
  <newvar #<9>>,
  <newvar #<10>>,
  <newvar #<11>>,
  <newvar #<12>>,
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Test.GLOBAL_RNG, :(:seed)),
  Expr(:call, SSAValue(50), SSAValue(51)),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(53), 0),
  Expr(:gotoifnot, SSAValue(54), 58),
  Core.SlotNumber(id=24) = Test.DefaultTestSet,
  goto 60,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=24) = Expr(:call, Test.typeof, SSAValue(58)),
  Core.SlotNumber(id=24),
  Expr(:call, Test._check_testset, SSAValue(60), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(62), 0),
  Expr(:gotoifnot, SSAValue(63), 67),
  Core.SlotNumber(id=25) = Test.DefaultTestSet,
  goto 69,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=25) = Expr(:call, Test.typeof, SSAValue(67)),
  Core.SlotNumber(id=25),
  SSAValue(69),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(72)),
  Expr(:call, Base.merge, SSAValue(71), SSAValue(73)),
  Expr(:call, Base.isempty, SSAValue(74)),
  Expr(:gotoifnot, SSAValue(75), 79),
  Core.SlotNumber(id=26) = Expr(:call, SSAValue(70), "Linear operators"),
  goto 81,
  Expr(:call, Core.kwfunc, SSAValue(70)),
  Core.SlotNumber(id=26) = Expr(:call, SSAValue(79), SSAValue(74), SSAValue(70), "Linear operators"),
  Core.SlotNumber(id=1) = Core.SlotNumber(id=26),
  Expr(:gotoifnot, false, 84),
  goto 82,
  Expr(:call, Test.push_testset, Core.SlotNumber(id=1)),
  Core.SlotNumber(id=2) = Expr(:call, Test.copy, Test.GLOBAL_RNG),
  Expr(:enter, 112),
  Core.SlotNumber(id=27) = -1,
  Expr(:enter, 95),
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Test.GLOBAL_RNG, :(:seed)),
  Expr(:call, SSAValue(89), SSAValue(90)),
  Expr(:call, :include, "test_linear_operators.jl"),
  Expr(:leave, 1),
  goto 110,
  Expr(:leave, 1),
  Core.SlotNumber(id=13) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=13), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(97), 101),
  Expr(:call, Test.rethrow),
  goto 102,
  false,
  Core.SlotNumber(id=1),
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=13),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(105)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(103), SSAValue(104), SSAValue(106), quote #= Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"):14 =# end),
  Expr(:call, Test.record, SSAValue(102), SSAValue(107)),
  Expr(:pop_exception, SSAValue(88)),
  Expr(:leave, 1),
  goto 114,
  Expr(:leave, 1),
  Core.SlotNumber(id=27) = 1,
  Expr(:call, Test.copy!, Test.GLOBAL_RNG, Core.SlotNumber(id=2)),
  Expr(:call, Core.:(===), Core.SlotNumber(id=27), 1),
  Expr(:gotoifnot, SSAValue(115), 118),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Core.SlotNumber(id=1)),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(120), 0),
  Expr(:gotoifnot, SSAValue(121), 125),
  Core.SlotNumber(id=28) = Test.DefaultTestSet,
  goto 127,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=28) = Expr(:call, Test.typeof, SSAValue(125)),
  Core.SlotNumber(id=28),
  Expr(:call, Test._check_testset, SSAValue(127), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(129), 0),
  Expr(:gotoifnot, SSAValue(130), 134),
  Core.SlotNumber(id=29) = Test.DefaultTestSet,
  goto 136,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=29) = Expr(:call, Test.typeof, SSAValue(134)),
  Core.SlotNumber(id=29),
  SSAValue(136),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(139)),
  Expr(:call, Base.merge, SSAValue(138), SSAValue(140)),
  Expr(:call, Base.isempty, SSAValue(141)),
  Expr(:gotoifnot, SSAValue(142), 146),
  Core.SlotNumber(id=30) = Expr(:call, SSAValue(137), "Non-Linear operators"),
  goto 148,
  Expr(:call, Core.kwfunc, SSAValue(137)),
  Core.SlotNumber(id=30) = Expr(:call, SSAValue(146), SSAValue(141), SSAValue(137), "Non-Linear operators"),
  Core.SlotNumber(id=3) = Core.SlotNumber(id=30),
  Expr(:gotoifnot, false, 151),
  goto 149,
  Expr(:call, Test.push_testset, Core.SlotNumber(id=3)),
  Core.SlotNumber(id=4) = Expr(:call, Test.copy, Test.GLOBAL_RNG),
  Expr(:enter, 179),
  Core.SlotNumber(id=31) = -1,
  Expr(:enter, 162),
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Test.GLOBAL_RNG, :(:seed)),
  Expr(:call, SSAValue(156), SSAValue(157)),
  Expr(:call, :include, "test_nonlinear_operators.jl"),
  Expr(:leave, 1),
  goto 177,
  Expr(:leave, 1),
  Core.SlotNumber(id=14) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=14), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(164), 168),
  Expr(:call, Test.rethrow),
  goto 169,
  false,
  Core.SlotNumber(id=3),
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=14),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(172)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(170), SSAValue(171), SSAValue(173), quote #= Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"):18 =# end),
  Expr(:call, Test.record, SSAValue(169), SSAValue(174)),
  Expr(:pop_exception, SSAValue(155)),
  Expr(:leave, 1),
  goto 181,
  Expr(:leave, 1),
  Core.SlotNumber(id=31) = 1,
  Expr(:call, Test.copy!, Test.GLOBAL_RNG, Core.SlotNumber(id=4)),
  Expr(:call, Core.:(===), Core.SlotNumber(id=31), 1),
  Expr(:gotoifnot, SSAValue(182), 185),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Core.SlotNumber(id=3)),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(187), 0),
  Expr(:gotoifnot, SSAValue(188), 192),
  Core.SlotNumber(id=32) = Test.DefaultTestSet,
  goto 194,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=32) = Expr(:call, Test.typeof, SSAValue(192)),
  Core.SlotNumber(id=32),
  Expr(:call, Test._check_testset, SSAValue(194), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(196), 0),
  Expr(:gotoifnot, SSAValue(197), 201),
  Core.SlotNumber(id=33) = Test.DefaultTestSet,
  goto 203,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=33) = Expr(:call, Test.typeof, SSAValue(201)),
  Core.SlotNumber(id=33),
  SSAValue(203),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(206)),
  Expr(:call, Base.merge, SSAValue(205), SSAValue(207)),
  Expr(:call, Base.isempty, SSAValue(208)),
  Expr(:gotoifnot, SSAValue(209), 213),
  Core.SlotNumber(id=34) = Expr(:call, SSAValue(204), "Linear Calculus rules"),
  goto 215,
  Expr(:call, Core.kwfunc, SSAValue(204)),
  Core.SlotNumber(id=34) = Expr(:call, SSAValue(213), SSAValue(208), SSAValue(204), "Linear Calculus rules"),
  Core.SlotNumber(id=5) = Core.SlotNumber(id=34),
  Expr(:gotoifnot, false, 218),
  goto 216,
  Expr(:call, Test.push_testset, Core.SlotNumber(id=5)),
  Core.SlotNumber(id=6) = Expr(:call, Test.copy, Test.GLOBAL_RNG),
  Expr(:enter, 246),
  Core.SlotNumber(id=35) = -1,
  Expr(:enter, 229),
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Test.GLOBAL_RNG, :(:seed)),
  Expr(:call, SSAValue(223), SSAValue(224)),
  Expr(:call, :include, "test_linear_operators_calculus.jl"),
  Expr(:leave, 1),
  goto 244,
  Expr(:leave, 1),
  Core.SlotNumber(id=15) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=15), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(231), 235),
  Expr(:call, Test.rethrow),
  goto 236,
  false,
  Core.SlotNumber(id=5),
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=15),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(239)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(237), SSAValue(238), SSAValue(240), quote #= Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"):22 =# end),
  Expr(:call, Test.record, SSAValue(236), SSAValue(241)),
  Expr(:pop_exception, SSAValue(222)),
  Expr(:leave, 1),
  goto 248,
  Expr(:leave, 1),
  Core.SlotNumber(id=35) = 1,
  Expr(:call, Test.copy!, Test.GLOBAL_RNG, Core.SlotNumber(id=6)),
  Expr(:call, Core.:(===), Core.SlotNumber(id=35), 1),
  Expr(:gotoifnot, SSAValue(249), 252),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Core.SlotNumber(id=5)),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(254), 0),
  Expr(:gotoifnot, SSAValue(255), 259),
  Core.SlotNumber(id=36) = Test.DefaultTestSet,
  goto 261,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=36) = Expr(:call, Test.typeof, SSAValue(259)),
  Core.SlotNumber(id=36),
  Expr(:call, Test._check_testset, SSAValue(261), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(263), 0),
  Expr(:gotoifnot, SSAValue(264), 268),
  Core.SlotNumber(id=37) = Test.DefaultTestSet,
  goto 270,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=37) = Expr(:call, Test.typeof, SSAValue(268)),
  Core.SlotNumber(id=37),
  SSAValue(270),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(273)),
  Expr(:call, Base.merge, SSAValue(272), SSAValue(274)),
  Expr(:call, Base.isempty, SSAValue(275)),
  Expr(:gotoifnot, SSAValue(276), 280),
  Core.SlotNumber(id=38) = Expr(:call, SSAValue(271), "Nonlinear Calculus rules"),
  goto 282,
  Expr(:call, Core.kwfunc, SSAValue(271)),
  Core.SlotNumber(id=38) = Expr(:call, SSAValue(280), SSAValue(275), SSAValue(271), "Nonlinear Calculus rules"),
  Core.SlotNumber(id=7) = Core.SlotNumber(id=38),
  Expr(:gotoifnot, false, 285),
  goto 283,
  Expr(:call, Test.push_testset, Core.SlotNumber(id=7)),
  Core.SlotNumber(id=8) = Expr(:call, Test.copy, Test.GLOBAL_RNG),
  Expr(:enter, 313),
  Core.SlotNumber(id=39) = -1,
  Expr(:enter, 296),
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Test.GLOBAL_RNG, :(:seed)),
  Expr(:call, SSAValue(290), SSAValue(291)),
  Expr(:call, :include, "test_nonlinear_operators_calculus.jl"),
  Expr(:leave, 1),
  goto 311,
  Expr(:leave, 1),
  Core.SlotNumber(id=16) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=16), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(298), 302),
  Expr(:call, Test.rethrow),
  goto 303,
  false,
  Core.SlotNumber(id=7),
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=16),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(306)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(304), SSAValue(305), SSAValue(307), quote #= Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"):26 =# end),
  Expr(:call, Test.record, SSAValue(303), SSAValue(308)),
  Expr(:pop_exception, SSAValue(289)),
  Expr(:leave, 1),
  goto 315,
  Expr(:leave, 1),
  Core.SlotNumber(id=39) = 1,
  Expr(:call, Test.copy!, Test.GLOBAL_RNG, Core.SlotNumber(id=8)),
  Expr(:call, Core.:(===), Core.SlotNumber(id=39), 1),
  Expr(:gotoifnot, SSAValue(316), 319),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Core.SlotNumber(id=7)),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(321), 0),
  Expr(:gotoifnot, SSAValue(322), 326),
  Core.SlotNumber(id=40) = Test.DefaultTestSet,
  goto 328,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=40) = Expr(:call, Test.typeof, SSAValue(326)),
  Core.SlotNumber(id=40),
  Expr(:call, Test._check_testset, SSAValue(328), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(330), 0),
  Expr(:gotoifnot, SSAValue(331), 335),
  Core.SlotNumber(id=41) = Test.DefaultTestSet,
  goto 337,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=41) = Expr(:call, Test.typeof, SSAValue(335)),
  Core.SlotNumber(id=41),
  SSAValue(337),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(340)),
  Expr(:call, Base.merge, SSAValue(339), SSAValue(341)),
  Expr(:call, Base.isempty, SSAValue(342)),
  Expr(:gotoifnot, SSAValue(343), 347),
  Core.SlotNumber(id=42) = Expr(:call, SSAValue(338), "L-BFGS"),
  goto 349,
  Expr(:call, Core.kwfunc, SSAValue(338)),
  Core.SlotNumber(id=42) = Expr(:call, SSAValue(347), SSAValue(342), SSAValue(338), "L-BFGS"),
  Core.SlotNumber(id=9) = Core.SlotNumber(id=42),
  Expr(:gotoifnot, false, 352),
  goto 350,
  Expr(:call, Test.push_testset, Core.SlotNumber(id=9)),
  Core.SlotNumber(id=10) = Expr(:call, Test.copy, Test.GLOBAL_RNG),
  Expr(:enter, 380),
  Core.SlotNumber(id=43) = -1,
  Expr(:enter, 363),
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Test.GLOBAL_RNG, :(:seed)),
  Expr(:call, SSAValue(357), SSAValue(358)),
  Expr(:call, :include, "test_lbfgs.jl"),
  Expr(:leave, 1),
  goto 378,
  Expr(:leave, 1),
  Core.SlotNumber(id=17) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=17), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(365), 369),
  Expr(:call, Test.rethrow),
  goto 370,
  false,
  Core.SlotNumber(id=9),
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=17),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(373)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(371), SSAValue(372), SSAValue(374), quote #= Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"):30 =# end),
  Expr(:call, Test.record, SSAValue(370), SSAValue(375)),
  Expr(:pop_exception, SSAValue(356)),
  Expr(:leave, 1),
  goto 382,
  Expr(:leave, 1),
  Core.SlotNumber(id=43) = 1,
  Expr(:call, Test.copy!, Test.GLOBAL_RNG, Core.SlotNumber(id=10)),
  Expr(:call, Core.:(===), Core.SlotNumber(id=43), 1),
  Expr(:gotoifnot, SSAValue(383), 386),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Core.SlotNumber(id=9)),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(388), 0),
  Expr(:gotoifnot, SSAValue(389), 393),
  Core.SlotNumber(id=44) = Test.DefaultTestSet,
  goto 395,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=44) = Expr(:call, Test.typeof, SSAValue(393)),
  Core.SlotNumber(id=44),
  Expr(:call, Test._check_testset, SSAValue(395), quote Expr(:call, :==, Expr(:call, :get_testset_depth), 0) end),
  Expr(:call, Test.get_testset_depth),
  Expr(:call, Test.:(==), SSAValue(397), 0),
  Expr(:gotoifnot, SSAValue(398), 402),
  Core.SlotNumber(id=45) = Test.DefaultTestSet,
  goto 404,
  Expr(:call, Test.get_testset),
  Core.SlotNumber(id=45) = Expr(:call, Test.typeof, SSAValue(402)),
  Core.SlotNumber(id=45),
  SSAValue(404),
  Expr(:call, Base.NamedTuple),
  Expr(:call, Core.apply_type, Test.Dict, Test.Symbol, Test.Any),
  Expr(:call, SSAValue(407)),
  Expr(:call, Base.merge, SSAValue(406), SSAValue(408)),
  Expr(:call, Base.isempty, SSAValue(409)),
  Expr(:gotoifnot, SSAValue(410), 414),
  Core.SlotNumber(id=46) = Expr(:call, SSAValue(405), "Syntax shorthands"),
  goto 416,
  Expr(:call, Core.kwfunc, SSAValue(405)),
  Core.SlotNumber(id=46) = Expr(:call, SSAValue(414), SSAValue(409), SSAValue(405), "Syntax shorthands"),
  Core.SlotNumber(id=11) = Core.SlotNumber(id=46),
  Expr(:gotoifnot, false, 419),
  goto 417,
  Expr(:call, Test.push_testset, Core.SlotNumber(id=11)),
  Core.SlotNumber(id=12) = Expr(:call, Test.copy, Test.GLOBAL_RNG),
  Expr(:enter, 447),
  Core.SlotNumber(id=47) = -1,
  Expr(:enter, 430),
  Expr(:call, Base.getproperty, Test.Random, :(:seed!)),
  Expr(:call, Base.getproperty, Test.GLOBAL_RNG, :(:seed)),
  Expr(:call, SSAValue(424), SSAValue(425)),
  Expr(:call, :include, "test_syntax.jl"),
  Expr(:leave, 1),
  goto 445,
  Expr(:leave, 1),
  Core.SlotNumber(id=18) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=18), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(432), 436),
  Expr(:call, Test.rethrow),
  goto 437,
  false,
  Core.SlotNumber(id=11),
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=18),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(440)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(438), SSAValue(439), SSAValue(441), quote #= Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"):34 =# end),
  Expr(:call, Test.record, SSAValue(437), SSAValue(442)),
  Expr(:pop_exception, SSAValue(423)),
  Expr(:leave, 1),
  goto 449,
  Expr(:leave, 1),
  Core.SlotNumber(id=47) = 1,
  Expr(:call, Test.copy!, Test.GLOBAL_RNG, Core.SlotNumber(id=12)),
  Expr(:call, Core.:(===), Core.SlotNumber(id=47), 1),
  Expr(:gotoifnot, SSAValue(450), 453),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Core.SlotNumber(id=11)),
  Expr(:leave, 1),
  goto 471,
  Expr(:leave, 1),
  Core.SlotNumber(id=19) = Expr(:the_exception),
  Expr(:call, Test.isa, Core.SlotNumber(id=19), Test.InterruptException),
  Expr(:gotoifnot, SSAValue(459), 463),
  Expr(:call, Test.rethrow),
  goto 464,
  false,
  Expr(:copyast, quote Expr(:tuple) end),
  Core.SlotNumber(id=19),
  Expr(:call, Base.getproperty, Test.Base, :(:catch_stack)),
  Expr(:call, SSAValue(466)),
  Expr(:call, Test.Error, :(:nontest_error), SSAValue(464), SSAValue(465), SSAValue(467), quote #= Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"):12 =# end),
  Expr(:call, Test.record, Symbol("#35#ts"), SSAValue(468)),
  Expr(:pop_exception, SSAValue(37)),
  Expr(:leave, 1),
  goto 475,
  Expr(:leave, 1),
  Core.SlotNumber(id=23) = 1,
  Expr(:call, Test.copy!, Test.GLOBAL_RNG, Symbol("#36#oldrng")),
  Expr(:call, Core.:(===), Core.SlotNumber(id=23), 1),
  Expr(:gotoifnot, SSAValue(476), 479),
  Expr(:call, Base.rethrow),
  Expr(:call, Test.pop_testset),
  Expr(:call, Test.finish, Symbol("#35#ts")),
  Expr(:return, SSAValue(480))], codelocs=Array{Int32, (481,)}[2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 16, 17, 18, 19, 19, 19, 20, 20, 20, 22, 21, 21, 21, 21, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 26, 27, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 34, 35, 36, 36, 36, 37, 37, 37, 39, 38, 38, 38, 38, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 43, 44, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50, 51, 52, 53, 53, 53, 54, 54, 54, 56, 55, 55, 55, 55, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 60, 61, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 67, 68, 69, 70, 70, 70, 71, 71, 71, 73, 72, 72, 72, 72, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 77, 78, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 84, 85, 86, 87, 87, 87, 88, 88, 88, 90, 89, 89, 89, 89, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 94, 95, 98, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100, 101, 102, 103, 104, 104, 104, 105, 105, 105, 107, 106, 106, 106, 106, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 111, 112, 10, 10, 10, 10, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 116, 117, 1], ssavaluetypes=481, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (117,)}[
  Core.LineInfoNode(method=Symbol("top-level scope"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=14, inlined_at=0),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1100, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1101, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1105, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1109, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1110, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1112, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1113, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=14, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=15, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1100, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1101, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1105, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1109, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1110, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1112, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1113, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=15, inlined_at=21),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1115, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1118, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1120, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1122, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1123, inlined_at=12),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=18, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=19, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1100, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1101, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1105, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1109, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1110, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1112, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1113, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=19, inlined_at=38),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1115, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1118, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1120, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1122, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1123, inlined_at=29),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=22, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=23, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1100, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1101, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1105, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1109, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1110, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1112, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1113, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=23, inlined_at=55),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1115, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1118, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1120, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1122, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1123, inlined_at=46),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=26, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=27, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1100, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1101, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1105, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1109, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1110, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1112, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1113, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=27, inlined_at=72),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1115, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1118, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1120, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1122, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1123, inlined_at=63),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=30, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=31, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1100, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1101, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1105, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1109, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1110, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1112, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1113, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=31, inlined_at=89),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1115, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1118, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1120, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1122, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1123, inlined_at=80),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=34, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=35, inlined_at=10),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1100, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1101, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1104, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1105, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1109, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1110, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1112, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1113, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"), line=35, inlined_at=106),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1115, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1118, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1120, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1122, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1123, inlined_at=97),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1115, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1118, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1120, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1122, inlined_at=1),
  Core.LineInfoNode(method=Symbol("macro expansion"), file=Symbol("/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Test/src/Test.jl"), line=1123, inlined_at=1)], slotnames=Array{Symbol, (47,)}[
  Symbol("#38#ts"),
  :oldrng,
  :ts,
  :oldrng,
  :ts,
  :oldrng,
  :ts,
  :oldrng,
  :ts,
  :oldrng,
  :ts,
  :oldrng,
  :err,
  :err,
  :err,
  :err,
  :err,
  :err,
  :err,
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol(""),
  Symbol("")], slotflags=Array{UInt8, (47,)}[0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], slottypes=nothing, rettype=Any, parent=nothing, min_world=1, max_world=-1, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:893
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:815
jl_parse_eval_all at /buildworker/worker/package_linux64/build/src/ast.c:873
jl_load at /buildworker/worker/package_linux64/build/src/toplevel.c:879
include at ./boot.jl:328 [inlined]
include_relative at ./loading.jl:1094
include at ./Base.jl:31
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2191
include at ./client.jl:431
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2197
do_call at /buildworker/worker/package_linux64/build/src/interpreter.c:323
eval_value at /buildworker/worker/package_linux64/build/src/interpreter.c:411
eval_stmt_value at /buildworker/worker/package_linux64/build/src/interpreter.c:362 [inlined]
eval_body at /buildworker/worker/package_linux64/build/src/interpreter.c:772
jl_interpret_toplevel_thunk_callback at /buildworker/worker/package_linux64/build/src/interpreter.c:884
Interpreter frame (ip: 0)
Core.CodeInfo(code=Array{Any, (2,)}[
  Expr(:call, :include, "/root/.julia/packages/AbstractOperators/xTEMf/test/runtests.jl"),
  Expr(:return, SSAValue(1))], codelocs=Array{Int32, (2,)}[1, 1], ssavaluetypes=2, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol("top-level scope"), file=:none, line=5, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, min_world=1, max_world=-1, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)jl_interpret_toplevel_thunk at /buildworker/worker/package_linux64/build/src/interpreter.c:893
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:815
jl_toplevel_eval_flex at /buildworker/worker/package_linux64/build/src/toplevel.c:764
jl_toplevel_eval_in at /buildworker/worker/package_linux64/build/src/toplevel.c:844
eval at ./boot.jl:330
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2191
exec_options at ./client.jl:271
_start at ./client.jl:464
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2191
jl_apply at /buildworker/worker/package_linux64/build/ui/../src/julia.h:1614 [inlined]
true_main at /buildworker/worker/package_linux64/build/ui/repl.c:96
main at /buildworker/worker/package_linux64/build/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
_start at /opt/julia/bin/julia (unknown line)

[▒,0;0,σ]  ℝ^4  ℝ^3 -> ℝ^4  ℝ^3 
forward preallocated
  0.000001 seconds (3 allocations: 144 bytes)
[▒,0;0,J(σ)]  ℝ^4  ℝ^3 -> ℝ^4  ℝ^3 
adjoint jacobian mul! preallocated
  0.000002 seconds (6 allocations: 192 bytes)

[▒,σ]  ℝ^4  ℝ^3 -> ℝ^3 
forward preallocated
  0.000000 seconds
[▒,J(σ)]  ℝ^4  ℝ^3 -> ℝ^3 
adjoint jacobian mul! preallocated
  0.000002 seconds (2 allocations: 32 bytes)

[sin,▒]  ℝ^3  ℝ^5 -> ℝ^3 
forward preallocated
  0.000000 seconds
[J(sin),▒]  ℝ^3  ℝ^5 -> ℝ^3 
adjoint jacobian mul! preallocated
  0.000001 seconds (2 allocations: 32 bytes)
((5,), (3,))

[sin,▒]  ℝ^5  ℝ^3 -> ℝ^3 
forward preallocated
  0.000000 seconds
[J(sin),▒]  ℝ^5  ℝ^3 -> ℝ^3 
adjoint jacobian mul! preallocated
  0.000001 seconds (2 allocations: 32 bytes)

[▒;σ]  ℝ^3 -> ℝ^4  ℝ^3 
forward preallocated
  0.000001 seconds
[▒;J(σ)]  ℝ^3 -> ℝ^4  ℝ^3 
adjoint jacobian mul! preallocated
  0.000003 seconds (2 allocations: 32 bytes)

HCAT  ℝ^3  ℝ^2  ℝ^7 -> ℝ^4  ℝ^3 
forward preallocated
  0.000002 seconds (22 allocations: 544 bytes)
HCAT  ℝ^3  ℝ^2  ℝ^7 -> ℝ^4  ℝ^3 
adjoint jacobian mul! preallocated
  0.000003 seconds (5 allocations: 80 bytes)

[HCAT;HCAT]  ℝ^3  ℝ^6  ℝ^5 -> ℝ^6  ℝ^7 
forward preallocated
  0.000002 seconds
[HCAT;HCAT]  ℝ^3  ℝ^6  ℝ^5 -> ℝ^6  ℝ^7 
adjoint jacobian mul! preallocated
  0.000004 seconds (17 allocations: 416 bytes)

Π  ℝ^3 -> ℝ^5 
forward preallocated
  0.000002 seconds
Π  ℝ^3 -> ℝ^5 
adjoint jacobian mul! preallocated
  0.000001 seconds (2 allocations: 32 bytes)

σ*[(⋅)b,I]  ℝ^(7, 5)  ℝ^7 -> ℝ^7 
forward preallocated
  0.000001 seconds
J(σ)*[(⋅)b,I]  ℝ^(7, 5)  ℝ^7 -> ℝ^7 
adjoint jacobian mul! preallocated
  0.000003 seconds (10 allocations: 240 bytes)

¶σ  ℝ^4 -> ℝ^(2, 2) 
forward preallocated
  0.000000 seconds (2 allocations: 80 bytes)
¶J(σ)  ℝ^4 -> ℝ^(2, 2) 
adjoint jacobian mul! preallocated
  0.000001 seconds (1 allocation: 16 bytes)

.σ  ℝ^4 -> ℝ^(4, 7) 
forward preallocated
  0.000001 seconds (3 allocations: 80 bytes)
.J(σ)  ℝ^4 -> ℝ^(4, 7) 
adjoint jacobian mul! preallocated
  0.000005 seconds (15 allocations: 464 bytes)

.σ  ℝ^1 -> ℝ^(1, 7) 
forward preallocated
  0.000000 seconds (3 allocations: 80 bytes)
.J(σ)  ℝ^1 -> ℝ^(1, 7) 
adjoint jacobian mul! preallocated
  0.000003 seconds (9 allocations: 224 bytes)

▒+σ  ℝ^5 -> ℝ^5 
forward preallocated
  0.000001 seconds
▒+J(σ)  ℝ^5 -> ℝ^5 
adjoint jacobian mul! preallocated
  0.000004 seconds (2 allocations: 32 bytes)

e-d  ℝ^10 -> ℝ^10 
forward preallocated
  0.000000 seconds
J(e)  ℝ^10 -> ℝ^10 
adjoint jacobian mul! preallocated
  0.000001 seconds (1 allocation: 16 bytes)

sin+d*I+d  ℝ^10 -> ℝ^10 
forward preallocated
  0.000001 seconds
J(sin)*I  ℝ^10 -> ℝ^10 
adjoint jacobian mul! preallocated
  0.000001 seconds (1 allocation: 16 bytes)

Π  ℝ^10 -> ℝ^10 
forward preallocated
  0.000001 seconds
Π  ℝ^10 -> ℝ^10 
adjoint jacobian mul! preallocated
  0.000001 seconds (5 allocations: 80 bytes)

I*sin  ℝ^10 -> ℝ^1 
forward preallocated
  0.000001 seconds
I*J(sin)  ℝ^10 -> ℝ^1 
adjoint jacobian mul! preallocated
  0.000001 seconds (2 allocations: 32 bytes)

▒*▒  ℝ^4 -> ℝ^1 
forward preallocated
  0.000001 seconds
▒*▒  ℝ^4 -> ℝ^1 
adjoint jacobian mul! preallocated
  0.000000 seconds (1 allocation: 16 bytes)

▒*▒  ℝ^(7, 5) -> ℝ^(5, 5) 
forward preallocated
  0.000002 seconds
▒*▒  ℝ^(7, 5) -> ℝ^(5, 5) 
adjoint jacobian mul! preallocated
  0.000003 seconds (5 allocations: 176 bytes)

sin*cos  ℝ^(3, 7) -> ℝ^(7, 7) 
forward preallocated
  0.000002 seconds (6 allocations: 192 bytes)
J(sin)*J(cos)  ℝ^(3, 7) -> ℝ^(7, 7) 
adjoint jacobian mul! preallocated
  0.000005 seconds (29 allocations: 1.297 KiB)

[sin+d,▒]*[cos,▒]  ℝ^3  ℝ^5 -> ℝ^1 
forward preallocated
  0.000001 seconds
[J(sin),▒]*[J(cos),▒]  ℝ^3  ℝ^5 -> ℝ^1 
adjoint jacobian mul! preallocated
  0.000004 seconds (24 allocations: 704 bytes)

[sin,▒]*[cos,▒]  ℝ^3  ℝ^5 -> ℝ^1 
forward preallocated
  0.000001 seconds
[J(sin),▒]*[J(cos),▒]  ℝ^3  ℝ^5 -> ℝ^1 
adjoint jacobian mul! preallocated
  0.000003 seconds (24 allocations: 704 bytes)

[sin+d,▒]*[cos,▒]  ℝ^5  ℝ^3 -> ℝ^1 
forward preallocated
  0.000001 seconds
[J(sin),▒]*[J(cos),▒]  ℝ^5  ℝ^3 -> ℝ^1 
adjoint jacobian mul! preallocated
  0.000002 seconds (24 allocations: 704 bytes)

I*sin  ℝ^10 -> ℝ^(10, 10) 
forward preallocated
  0.000001 seconds
I*J(sin)  ℝ^10 -> ℝ^(10, 10) 
adjoint jacobian mul! preallocated
  0.000001 seconds (2 allocations: 32 bytes)

▒*▒  ℝ^4 -> ℝ^(3, 3) 
forward preallocated
  0.000001 seconds
▒*▒  ℝ^4 -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000001 seconds (1 allocation: 16 bytes)

▒*▒  ℝ^(7, 5) -> ℝ^(3, 3) 
forward preallocated
  0.000001 seconds
▒*▒  ℝ^(7, 5) -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000002 seconds (5 allocations: 176 bytes)

sin*cos  ℝ^(3, 7) -> ℝ^(3, 3) 
forward preallocated
  0.000003 seconds (6 allocations: 192 bytes)
J(sin)*J(cos)  ℝ^(3, 7) -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000005 seconds (29 allocations: 1.297 KiB)

[sin+d,▒]*[cos,▒]  ℝ^3  ℝ^5 -> ℝ^(3, 3) 
forward preallocated
  0.000001 seconds
[J(sin),▒]*[J(cos),▒]  ℝ^3  ℝ^5 -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000004 seconds (16 allocations: 544 bytes)

[sin,▒]*[cos,▒]  ℝ^3  ℝ^5 -> ℝ^(3, 3) 
forward preallocated
  0.000001 seconds
[J(sin),▒]*[J(cos),▒]  ℝ^3  ℝ^5 -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000004 seconds (16 allocations: 544 bytes)

[sin+d,▒]*[cos,▒]  ℝ^5  ℝ^3 -> ℝ^(3, 3) 
forward preallocated
  0.000001 seconds
[J(sin),▒]*[J(cos),▒]  ℝ^5  ℝ^3 -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000003 seconds (16 allocations: 544 bytes)

I*I  ℝ^(3, 3) -> ℝ^(3, 3) 
forward preallocated
  0.000000 seconds
I*I  ℝ^(3, 3) -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000001 seconds (5 allocations: 176 bytes)

sin*cos  ℝ^(3, 3) -> ℝ^(3, 3) 
forward preallocated
  0.000001 seconds (6 allocations: 192 bytes)
J(sin)*J(cos)  ℝ^(3, 3) -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000002 seconds (29 allocations: 1.109 KiB)

atan*sin*cos  ℝ^(3, 3) -> ℝ^(3, 3) 
forward preallocated
  0.000002 seconds (9 allocations: 288 bytes)
J(atan)*J(sin)*J(cos)  ℝ^(3, 3) -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000003 seconds (49 allocations: 1.641 KiB)

▒*▒  ℝ^(2, 3) -> ℝ^(3, 3) 
forward preallocated
  0.000001 seconds
▒*▒  ℝ^(2, 3) -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000002 seconds (5 allocations: 176 bytes)

[sin+d,▒]*[sin,▒]  ℝ^(5, 5)  ℝ^(3, 5) -> ℝ^(5, 5) 
forward preallocated
  0.000005 seconds (18 allocations: 672 bytes)
[J(sin),▒]*[J(sin),▒]  ℝ^(5, 5)  ℝ^(3, 5) -> ℝ^(5, 5) 
adjoint jacobian mul! preallocated
  0.000006 seconds (30 allocations: 832 bytes)

[sin,▒]*[sin,▒]  ℝ^(5, 5)  ℝ^(3, 5) -> ℝ^(5, 5) 
forward preallocated
  0.000005 seconds (14 allocations: 512 bytes)
[J(sin),▒]*[J(sin),▒]  ℝ^(5, 5)  ℝ^(3, 5) -> ℝ^(5, 5) 
adjoint jacobian mul! preallocated
  0.000008 seconds (30 allocations: 832 bytes)

[sin+d,▒]*[sin,▒]  ℝ^(3, 5)  ℝ^(5, 5) -> ℝ^(5, 5) 
forward preallocated
  0.000005 seconds (18 allocations: 672 bytes)
[J(sin),▒]*[J(sin),▒]  ℝ^(3, 5)  ℝ^(5, 5) -> ℝ^(5, 5) 
adjoint jacobian mul! preallocated
  0.000006 seconds (30 allocations: 832 bytes)

▒*▒*▒  ℝ^(7, 5) -> ℝ^(5, 3) 
forward preallocated
  0.000003 seconds
▒*▒*▒  ℝ^(7, 5) -> ℝ^(5, 3) 
adjoint jacobian mul! preallocated
  0.000006 seconds (10 allocations: 352 bytes)

▒*▒*▒  ℝ^(7, 5) -> ℝ^(9, 5) 
forward preallocated
  0.000003 seconds
▒*▒*▒  ℝ^(7, 5) -> ℝ^(9, 5) 
adjoint jacobian mul! preallocated
  0.000005 seconds (10 allocations: 352 bytes)

▒*▒*▒  ℝ^(7, 5) -> ℝ^(9, 5) 
forward preallocated
  0.000003 seconds
▒*▒*▒  ℝ^(7, 5) -> ℝ^(9, 5) 
adjoint jacobian mul! preallocated
  0.000005 seconds (10 allocations: 352 bytes)

I.*I  ℝ^(3, 3) -> ℝ^(3, 3) 
forward preallocated
  0.000001 seconds (4 allocations: 160 bytes)
I.*I  ℝ^(3, 3) -> ℝ^(3, 3) 
adjoint jacobian mul! preallocated
  0.000001 seconds (13 allocations: 496 bytes)

sin.*cos  ℝ^(3, 2) -> ℝ^(3, 2) 
forward preallocated
  0.000001 seconds (10 allocations: 352 bytes)
J(sin).*J(cos)  ℝ^(3, 2) -> ℝ^(3, 2) 
adjoint jacobian mul! preallocated
  0.000004 seconds (37 allocations: 1.359 KiB)

[sin+d,▒].*[cos,▒]  ℝ^3  ℝ^5 -> ℝ^3 
forward preallocated
  0.000001 seconds
[J(sin),▒].*[J(cos),▒]  ℝ^3  ℝ^5 -> ℝ^3 
adjoint jacobian mul! preallocated
  0.000002 seconds (16 allocations: 544 bytes)

[sin,▒].*[cos,▒]  ℝ^3  ℝ^5 -> ℝ^3 
forward preallocated
  0.000001 seconds
[J(sin),▒].*[J(cos),▒]  ℝ^3  ℝ^5 -> ℝ^3 
adjoint jacobian mul! preallocated
  0.000003 seconds (16 allocations: 544 bytes)

[sin+d,▒].*[cos,▒]  ℝ^5  ℝ^3 -> ℝ^3 
forward preallocated
  0.000001 seconds
[J(sin),▒].*[J(cos),▒]  ℝ^5  ℝ^3 -> ℝ^3 
adjoint jacobian mul! preallocated
  0.000005 seconds (16 allocations: 544 bytes)

Testing L-BFGS routines
LBFGS  ℝ^10 -> ℝ^10 
LBFGS  ℝ^10  ℝ^10 -> ℝ^10  ℝ^10 
  0.488312 seconds (251.71 k allocations: 12.244 MiB, 43.00% gc time)
  0.467360 seconds (425.88 k allocations: 19.918 MiB, 3.83% gc time)
  0.164018 seconds (83.00 k allocations: 3.701 MiB)
  0.377235 seconds (123.44 k allocations: 5.170 MiB)
  0.000008 seconds
  0.000032 seconds (128 allocations: 2.313 KiB)
  0.000005 seconds
  0.000009 seconds (114 allocations: 1.969 KiB)
  0.000006 seconds
  0.000011 seconds (246 allocations: 4.406 KiB)
  0.000003 seconds
  0.000009 seconds (114 allocations: 1.969 KiB)
  0.000006 seconds
  0.000016 seconds (364 allocations: 6.500 KiB)
  0.000004 seconds
  0.000008 seconds (114 allocations: 1.969 KiB)
  0.000006 seconds
  0.000015 seconds (364 allocations: 6.500 KiB)

Testing linear operators syntax
Test Summary:     | Pass  Total
AbstractOperators | 1256   1256
   Testing AbstractOperators tests passed 
